{"version":3,"sources":["webpack://src/components/Component/Component.module.scss","webpack://src/styles/config/_variables.scss","webpack://src/styles/helpers/_mixins.scss","webpack://src/styles/helpers/_helpers.scss","webpack://src/styles/base/_fonts.scss","webpack://src/styles/base/_typography.scss","webpack://node_modules/breakpoint-sass/stylesheets/_breakpoint.scss","webpack://src/styles/App.scss"],"names":[],"mappings":"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","file":"main.71e45f57.chunk.css","sourcesContent":["@import '~@styles/config/variables';\r\n\r\n.root {\r\n  padding: 20px 30px;\r\n\r\n  &-variant {\r\n    background-color: $light-grey;\r\n  }\r\n}\r\n","//\r\n// global variables\r\n//\r\n\r\n// $debug: false !default;\r\n$debug: true;\r\n\r\n//\r\n// fonts\r\n// ----------------\r\n\r\n// font families\r\n$fonts: (\r\n  'opensans': (\r\n    300: 'opensans-light',\r\n    400: 'opensans-regular',\r\n    600: 'opensans-semibold',\r\n    700: 'opensans-bold',\r\n    800: 'opensans-extrabold'\r\n  )\r\n);\r\n\r\n// default fonts\r\n$default-font: opensans;\r\n$default-font-fallback: Frutiger, 'Frutiger Linotype', Univers, Calibri,\r\n  'Gill Sans', 'Gill Sans MT', 'Myriad Pro', Myriad, 'DejaVu Sans Condensed',\r\n  'Liberation Sans', 'Nimbus Sans L', Tahoma, Geneva, 'Helvetica Neue',\r\n  Helvetica, Arial, sans-serif;\r\n$default-font-family: unquote($default-font + ', ' + $default-font-fallback);\r\n\r\n// default heading fonts\r\n$heading-font: oswald;\r\n\r\n// font sizes\r\n$font-sizes: (\r\n  tiny: 10px,\r\n  x-small: 12px,\r\n  small: 15px,\r\n  normal: 16px,\r\n  medium: 18px,\r\n  medium-large: 20px,\r\n  large: 21px,\r\n  x-large: 24px,\r\n  xx-large: 30px\r\n);\r\n$font-size-tiny: nth(map-get($font-sizes, tiny), 1);\r\n$font-size-x-small: nth(map-get($font-sizes, x-small), 1);\r\n$font-size-small: nth(map-get($font-sizes, small), 1);\r\n$font-size-normal: nth(map-get($font-sizes, normal), 1);\r\n$font-size-medium: nth(map-get($font-sizes, medium), 1);\r\n$font-size-medium-large: nth(map-get($font-sizes, medium-large), 1);\r\n$font-size-large: nth(map-get($font-sizes, large), 1);\r\n$font-size-x-large: nth(map-get($font-sizes, x-large), 1);\r\n$font-size-xx-large: nth(map-get($font-sizes, xx-large), 1);\r\n\r\n// default font size\r\n$font-size-default: $font-size-medium;\r\n\r\n// line-height default\r\n$line-height-default: 1.15;\r\n\r\n//\r\n// colors\r\n// ----------------\r\n$colors: (\r\n  black: #000,\r\n  light-black: #060606,\r\n  charcoal: #404040,\r\n  dim-grey: #616161,\r\n  grey: #7f7f7f,\r\n  dark-grey: #aaa,\r\n  light-grey: #c9c9c9,\r\n  very-light-grey: #d3d3d3,\r\n  gainsboro: #e5e5e5,\r\n  white: #ffffff,\r\n  persia-indigo: #551a8b,\r\n  red: #ff0000,\r\n  blue: #0000ee,\r\n  green: #108900\r\n);\r\n$black: nth(map-get($colors, black), 1);\r\n$light-black: nth(map-get($colors, light-black), 1);\r\n$charcoal: nth(map-get($colors, charcoal), 1);\r\n$dim-grey: nth(map-get($colors, dim-grey), 1);\r\n$grey: nth(map-get($colors, grey), 1);\r\n$dark-grey: nth(map-get($colors, dark-grey), 1);\r\n$light-grey: nth(map-get($colors, light-grey), 1);\r\n$very-light-grey: nth(map-get($colors, very-light-grey), 1);\r\n$gainsboro: nth(map-get($colors, gainsboro), 1);\r\n$white: nth(map-get($colors, white), 1);\r\n$blue: nth(map-get($colors, blue), 1);\r\n$persia-indigo: nth(map-get($colors, persia-indigo), 1);\r\n$green: nth(map-get($colors, green), 1);\r\n$red: nth(map-get($colors, red), 1);\r\n\r\n// default font color\r\n$font-color-default: $light-black;\r\n\r\n// link colors\r\n$link-colors: (\r\n  'link': $blue,\r\n  'visited': $persia-indigo,\r\n  'hover': $green,\r\n  'active': $red\r\n);\r\n\r\n// form elements colors\r\n$field-colors: (\r\n  field: (\r\n    color: $black,\r\n    background: $white,\r\n    border: $black,\r\n    place-holder: $dark-grey\r\n  ),\r\n  hover: (\r\n    color: $white,\r\n    background: $white,\r\n    border: rgba($black, 0.7)\r\n  ),\r\n  active: (\r\n    color: $black,\r\n    background: $white,\r\n    border: rgba($white, 0.7)\r\n  )\r\n);\r\n\r\n// error color\r\n$error-color: $red;\r\n\r\n// button colors\r\n$btn-colors: (\r\n  default: (\r\n    color: $white,\r\n    background: $black,\r\n    border: rgba($white, 0.32),\r\n    hover-color: $white,\r\n    hover-background: rgba($white, 0.08),\r\n    hover-border: rgba($white, 0.7)\r\n  )\r\n);\r\n\r\n// images\r\n$image-url: '~@app/assets/images/';\r\n\r\n//\r\n// transitions\r\n// ----------------\r\n\r\n// default transitions\r\n$default-duration: 300ms;\r\n$default-delay: 100ms;\r\n\r\n//\r\n// layout\r\n// ----------------\r\n$breakpoints: (\r\n  'small': 360px,\r\n  'medium': 768px,\r\n  'large': 1024px\r\n);\r\n$app-max-width: 1400px;\r\n","//\r\n// functions\r\n//\r\n\r\n// Libraries Mixins\r\n@import '~breakpoint-sass/stylesheets/breakpoint';\r\n\r\n// mediaQueries info\r\n// get on screen information for debugging media queries\r\n@mixin queryInfo($breakpoints: $breakpoints) {\r\n  @if $debug == true {\r\n    &:after {\r\n      right: 0;\r\n      bottom: 0;\r\n      padding: 0.2rem;\r\n      color: #fff;\r\n      display: block;\r\n      position: fixed;\r\n      z-index: 200;\r\n      background-color: #000000;\r\n      @each $breakpoint in map_keys($breakpoints) {\r\n        @include breakpoint(map-get($breakpoints, $breakpoint)) {\r\n          content: '#{$breakpoint} - #{map-get($breakpoints, $breakpoint)}';\r\n          @include breakpoint((orientation landscape)) {\r\n            content: '#{$breakpoint} - #{map-get($breakpoints, $breakpoint)} - landscape';\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// hidden extend wrapper\r\n@mixin hidden($extend: true) {\r\n  @if $extend {\r\n    @extend %hidden;\r\n  } @else {\r\n    width: 0;\r\n    height: 0;\r\n    opacity: 0;\r\n    overflow: hidden;\r\n    position: absolute;\r\n    z-index: -1;\r\n  }\r\n}\r\n\r\n// hidden placeholder\r\n%hidden {\r\n  @include hidden($extend: false);\r\n}\r\n\r\n// clear fix\r\n@mixin clearFix($extend: true) {\r\n  @if $extend {\r\n    @extend %clearFix;\r\n  } @else {\r\n    &:after {\r\n      content: ' ';\r\n      height: 0;\r\n      display: block;\r\n      clear: both;\r\n      visibility: hidden;\r\n      overflow: hidden;\r\n    }\r\n  }\r\n}\r\n\r\n// clear fix placeholder\r\n%clearFix {\r\n  @include clearFix($extend: false);\r\n}\r\n\r\n// remove text\r\n@mixin remove-text($extend: true) {\r\n  @if $extend {\r\n    @extend %remove-text;\r\n  } @else {\r\n    font-size: 0;\r\n    line-height: 0;\r\n    text-indent: 100%;\r\n    overflow: hidden;\r\n  }\r\n}\r\n\r\n// remove text placeholder\r\n%remove-text {\r\n  @include remove-text($extend: false);\r\n}\r\n\r\n// no highlight\r\n@mixin no-highlight($extend: true) {\r\n  @if $extend {\r\n    @extend %no-highlight;\r\n  } @else {\r\n    outline: 0;\r\n    outline-style: none;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n  }\r\n}\r\n\r\n// remove text placeholder\r\n%no-highlight {\r\n  @include no-highlight($extend: false);\r\n}\r\n\r\n// transitions\r\n@mixin transitions($duration, $timingFunction, $delay, $properties: all) {\r\n  $propsAndTime: ();\r\n\r\n  @each $prop in $properties {\r\n    $prop: $prop;\r\n    $propsAndTime: append(\r\n      $propsAndTime,\r\n      ($prop $duration $timingFunction $delay),\r\n      comma\r\n    );\r\n  }\r\n\r\n  transition: $propsAndTime;\r\n}\r\n","//\r\n// helpers\r\n//\r\n\r\nhtml, body, * {\r\n  box-sizing: border-box;\r\n\r\n  &:before,\r\n  &:after {\r\n      box-sizing: inherit;\r\n  }\r\n}\r\n\r\n// hidden (visually)\r\n.hidden {\r\n  @include hidden;\r\n}\r\n","//\r\n// fonts\r\n//\r\n\r\n// Configuration\r\n@import '@styles/config/variables';\r\n\r\n//\r\n// helpers\r\n//\r\n@import '@styles/helpers/functions';\r\n\r\n//\r\n// fonts\r\n//\r\n@each $font in map_keys($fonts) {\r\n  @each $font-weight in map_keys(map-get($fonts, $font)) {\r\n    $_fonts-dir: '../../assets/fonts/';\r\n    $_font-name: map-deep-get($fonts, $font, $font-weight);\r\n\r\n    @font-face {\r\n      font-family: '#{$font}';\r\n      src: url('#{$_fonts-dir}#{$_font-name}.woff2') format('woff2'),\r\n        url('#{$_fonts-dir}#{$_font-name}.woff') format('woff'),\r\n        url('#{$_fonts-dir}#{$_font-name}.ttf') format('truetype');\r\n      font-weight: $font-weight;\r\n      font-style: normal;\r\n    }\r\n  }\r\n}\r\n","//\r\n// typography\r\n//\r\n$_heading-tags: h1, h2, h3, h4, h5, h6;\r\n$_text-block-tags: p, ul, ol, dl, pre, address, blockquote, table;\r\n$_block-tags: article, aside, canvas, div, fieldset, figure, form, hgroup,\r\n  output, section, video;\r\n$_text-block-and-block-tags: join($_text-block-tags, $_block-tags);\r\n$_heading-and-block-tags: join($_heading-tags, $_block-tags);\r\n\r\nhtml {\r\n  font-family: $default-font-family;\r\n  font-size: pem($font-size-default);\r\n}\r\n\r\nbody {\r\n  font-size: $font-size-x-small;\r\n  letter-spacing: -0.028em;\r\n  line-height: $line-height-default;\r\n  color: $font-color-default;\r\n\r\n  @include breakpoint(map-get($breakpoints, small)) {\r\n    font-size: $font-size-small;\r\n  }\r\n\r\n  @include breakpoint(map-get($breakpoints, medium)) {\r\n    font-size: $font-size-normal;\r\n    letter-spacing: -0.04em;\r\n  }\r\n\r\n  @include breakpoint(map-get($breakpoints, large)) {\r\n    font-size: $font-size-medium;\r\n  }\r\n}\r\n\r\n// remove first and last contained elements margins\r\n* > * {\r\n  &:first-child {\r\n    margin-top: 0;\r\n  }\r\n\r\n  &:last-child {\r\n    margin-bottom: 0;\r\n  }\r\n}\r\n\r\n//\r\n// headings\r\n//\r\nh1,\r\nh2,\r\nh3,\r\nh4,\r\nh5,\r\nh6 {\r\n  font-family: $heading-font;\r\n  letter-spacing: -0.03em;\r\n  line-height: $line-height-default;\r\n  color: $light-black;\r\n\r\n  // any heading element following a heading block\r\n  @for $i from 1 through length($_heading-tags) {\r\n    & + #{nth($_heading-tags, $i)} {\r\n      margin-top: 0;\r\n\r\n      @include breakpoint(map-get($breakpoints, small)) {\r\n        margin-top: 3px;\r\n      }\r\n\r\n      @include breakpoint(map-get($breakpoints, large)) {\r\n        margin-top: 4px;\r\n      }\r\n    }\r\n  }\r\n\r\n  // any text block or block element following a heading block\r\n  @for $i from 1 through length($_text-block-and-block-tags) {\r\n    & + #{nth($_text-block-and-block-tags, $i)} {\r\n      margin-top: 5px;\r\n\r\n      @include breakpoint(map-get($breakpoints, medium)) {\r\n        margin-top: 9px;\r\n      }\r\n\r\n      @include breakpoint(map-get($breakpoints, large)) {\r\n        margin-top: 11px;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nh1 {\r\n  margin: ($font-size-medium-large / 2) 0 0;\r\n  font-size: $font-size-medium-large;\r\n\r\n  @include breakpoint(map-get($breakpoints, small)) {\r\n    margin: ($font-size-large / 2) 0 0;\r\n    font-size: $font-size-large;\r\n  }\r\n\r\n  @include breakpoint(map-get($breakpoints, medium)) {\r\n    margin: ($font-size-x-large / 2) 0 0;\r\n    font-size: $font-size-x-large;\r\n  }\r\n\r\n  @include breakpoint(map-get($breakpoints, large)) {\r\n    margin: ($font-size-xx-large / 2) 0 0;\r\n    font-size: ($font-size-xx-large);\r\n  }\r\n}\r\n\r\nh2 {\r\n  margin: ($font-size-medium / 2) 0 0;\r\n  font-size: $font-size-medium;\r\n\r\n  @include breakpoint(map-get($breakpoints, small)) {\r\n    margin: ($font-size-medium-large / 2) 0 0;\r\n    font-size: $font-size-medium-large;\r\n  }\r\n\r\n  @include breakpoint(map-get($breakpoints, medium)) {\r\n    margin: ($font-size-large / 2) 0 0;\r\n    font-size: $font-size-large;\r\n  }\r\n\r\n  @include breakpoint(map-get($breakpoints, large)) {\r\n    margin: ($font-size-x-large / 2) 0 0;\r\n    font-size: $font-size-x-large;\r\n  }\r\n}\r\n\r\nh3 {\r\n  margin: ($font-size-normal / 2) 0 0;\r\n  font-size: $font-size-normal;\r\n\r\n  @include breakpoint(map-get($breakpoints, small)) {\r\n    margin: ($font-size-medium / 2) 0 0;\r\n    font-size: $font-size-medium;\r\n  }\r\n\r\n  @include breakpoint(map-get($breakpoints, medium)) {\r\n    margin: ($font-size-medium-large / 2) 0 0;\r\n    font-size: $font-size-medium-large;\r\n  }\r\n\r\n  @include breakpoint(map-get($breakpoints, large)) {\r\n    margin: ($font-size-large / 2) 0 0;\r\n    font-size: $font-size-large;\r\n  }\r\n}\r\n\r\nh4 {\r\n  margin: ($font-size-small / 2) 0 0;\r\n  font-size: $font-size-small;\r\n  font-weight: 400;\r\n  letter-spacing: -0.05em;\r\n\r\n  @include breakpoint(map-get($breakpoints, small)) {\r\n    margin: ($font-size-normal / 2) 0 0;\r\n    font-size: $font-size-normal;\r\n  }\r\n\r\n  @include breakpoint(map-get($breakpoints, medium)) {\r\n    margin: ($font-size-medium / 2) 0 0;\r\n    font-size: $font-size-medium;\r\n  }\r\n\r\n  @include breakpoint(map-get($breakpoints, large)) {\r\n    margin: ($font-size-medium-large / 2) 0 0;\r\n    font-size: $font-size-medium-large;\r\n  }\r\n}\r\n\r\nh5 {\r\n  margin: ($font-size-x-small / 2) 0 0;\r\n  font-size: $font-size-x-small;\r\n  font-weight: 400;\r\n\r\n  @include breakpoint(map-get($breakpoints, small)) {\r\n    margin: ($font-size-small / 2) 0 0;\r\n    font-size: $font-size-small;\r\n  }\r\n\r\n  @include breakpoint(map-get($breakpoints, medium)) {\r\n    margin: ($font-size-normal / 2) 0 0;\r\n    font-size: $font-size-normal;\r\n  }\r\n\r\n  @include breakpoint(map-get($breakpoints, large)) {\r\n    margin: ($font-size-medium / 2) 0 0;\r\n    font-size: $font-size-medium;\r\n  }\r\n}\r\n\r\nh6 {\r\n  margin: ($font-size-tiny / 2) 0 0;\r\n  font-size: $font-size-tiny;\r\n\r\n  @include breakpoint(map-get($breakpoints, small)) {\r\n    margin: ($font-size-x-small / 2) 0 0;\r\n    font-size: $font-size-x-small;\r\n  }\r\n\r\n  @include breakpoint(map-get($breakpoints, medium)) {\r\n    margin: ($font-size-small / 2) 0 0;\r\n    font-size: $font-size-small;\r\n  }\r\n\r\n  @include breakpoint(map-get($breakpoints, large)) {\r\n    margin: ($font-size-normal / 2) 0 0;\r\n    font-size: $font-size-normal;\r\n  }\r\n}\r\n\r\n// default texts\r\n%default-texts {\r\n  margin: 16px 0;\r\n\r\n  @include breakpoint(map-get($breakpoints, small)) {\r\n    margin: 18px 0;\r\n  }\r\n\r\n  @include breakpoint(map-get($breakpoints, large)) {\r\n    margin: 22px 0;\r\n  }\r\n\r\n  // any heading or block element following a text block\r\n  @for $i from 1 through length($_heading-and-block-tags) {\r\n    & + #{nth($_heading-and-block-tags, $i)} {\r\n      margin-top: 12px;\r\n\r\n      @include breakpoint(map-get($breakpoints, small)) {\r\n        margin-top: 18px;\r\n      }\r\n\r\n      @include breakpoint(map-get($breakpoints, medium)) {\r\n        margin-top: 24px;\r\n      }\r\n\r\n      @include breakpoint(map-get($breakpoints, large)) {\r\n        margin-top: 34px;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n//\r\n// paragraphs\r\n//\r\np {\r\n  @extend %default-texts;\r\n}\r\n\r\n//\r\n// lists\r\n//\r\n\r\n// lists\r\n%lists {\r\n  padding: 0;\r\n  list-style: none;\r\n  @extend %default-texts;\r\n\r\n  // nested lists and paragraphs\r\n  & p,\r\n  & ul,\r\n  & ol {\r\n    &:first-child,\r\n    &:last-child {\r\n      margin-bottom: 16px;\r\n    }\r\n  }\r\n\r\n  p:only-child {\r\n    margin: 0;\r\n  }\r\n}\r\n\r\n// list - items\r\n%list-items {\r\n  margin: 0 0 5px;\r\n  padding: 0 0 0 11px;\r\n\r\n  @include breakpoint(map-get($breakpoints, small)) {\r\n    padding: 0 0 0 13px;\r\n  }\r\n  @include breakpoint(map-get($breakpoints, medium)) {\r\n    padding: 0 0 0 15px;\r\n  }\r\n  @include breakpoint(map-get($breakpoints, large)) {\r\n    margin: 0 0 9px;\r\n    padding: 0 0 0 20px;\r\n  }\r\n\r\n  p:only-child {\r\n    padding: 0;\r\n  }\r\n}\r\n\r\n%bullets-level-1 {\r\n  $_bullet-size: 7px;\r\n\r\n  content: '';\r\n  top: (1em * $line-height-default) / 2;\r\n  left: 0;\r\n  margin-top: -($_bullet-size / 2);\r\n  width: $_bullet-size;\r\n  height: $_bullet-size;\r\n  display: block;\r\n  border-radius: 100%;\r\n  position: absolute;\r\n  background-color: $charcoal;\r\n  box-shadow: -1px -1px 0 0 rgba($black, 0.21);\r\n\r\n  @include breakpoint(map-get($breakpoints, small)) {\r\n    $_bullet-size: 8px;\r\n\r\n    margin-top: -($_bullet-size / 2);\r\n    width: $_bullet-size;\r\n    height: $_bullet-size;\r\n  }\r\n\r\n  @include breakpoint(map-get($breakpoints, medium)) {\r\n    $_bullet-size: 10px;\r\n\r\n    margin-top: -($_bullet-size / 2);\r\n    width: $_bullet-size;\r\n    height: $_bullet-size;\r\n  }\r\n\r\n  @include breakpoint(map-get($breakpoints, large)) {\r\n    $_bullet-size: 12px;\r\n\r\n    margin-top: -($_bullet-size / 2);\r\n    width: $_bullet-size;\r\n    height: $_bullet-size;\r\n  }\r\n}\r\n\r\n%bullets-level-2 {\r\n  $_bullet-size: 5px;\r\n\r\n  margin-top: -($_bullet-size / 2);\r\n  width: $_bullet-size;\r\n  height: $_bullet-size;\r\n  border: 1px solid $charcoal;\r\n  background-color: transparent;\r\n  box-shadow: none;\r\n\r\n  @include breakpoint(map-get($breakpoints, small)) {\r\n    $_bullet-size: 6px;\r\n\r\n    margin-top: -($_bullet-size / 2);\r\n    width: $_bullet-size;\r\n    height: $_bullet-size;\r\n  }\r\n\r\n  @include breakpoint(map-get($breakpoints, medium)) {\r\n    $_bullet-size: 8px;\r\n\r\n    margin-top: -($_bullet-size / 2);\r\n    width: $_bullet-size;\r\n    height: $_bullet-size;\r\n  }\r\n\r\n  @include breakpoint(map-get($breakpoints, large)) {\r\n    $_bullet-size: 10px;\r\n\r\n    margin-top: -($_bullet-size / 2);\r\n    width: $_bullet-size;\r\n    height: $_bullet-size;\r\n    border-width: 2px;\r\n  }\r\n}\r\n\r\n%bullets-level-3 {\r\n  $_bullet-size: 1px;\r\n\r\n  margin-top: -($_bullet-size / 2);\r\n  height: $_bullet-size;\r\n  border-radius: 0;\r\n  border-style: none;\r\n  background-color: $charcoal;\r\n\r\n  @include breakpoint(map-get($breakpoints, medium)) {\r\n    $_bullet-size: 2px;\r\n\r\n    margin-top: -($_bullet-size / 2);\r\n    height: $_bullet-size;\r\n  }\r\n\r\n  @include breakpoint(map-get($breakpoints, large)) {\r\n    $bullet-size: 2px;\r\n\r\n    margin-top: -($_bullet-size / 2);\r\n    height: $_bullet-size;\r\n  }\r\n}\r\n\r\nul {\r\n  @extend %lists;\r\n}\r\n\r\nol {\r\n  counter-reset: li-counter;\r\n  @extend %lists;\r\n}\r\n\r\ndl {\r\n  @extend %lists;\r\n}\r\n\r\nli {\r\n  position: relative;\r\n  @extend %list-items;\r\n}\r\n\r\n// ordered lits items\r\nol > li {\r\n  &:before {\r\n    content: counter(li-counter) '. ';\r\n    counter-increment: li-counter;\r\n    top: 0.36em;\r\n    left: -6px;\r\n    width: 13px;\r\n    font: normal 0.8em/1 $heading-font;\r\n    text-align: right;\r\n    color: $charcoal;\r\n    display: block;\r\n    position: absolute;\r\n\r\n    @include breakpoint(map-get($breakpoints, small)) {\r\n      width: 15px;\r\n    }\r\n\r\n    @include breakpoint(map-get($breakpoints, medium)) {\r\n      top: 0.46em;\r\n      left: -9px;\r\n      width: 20px;\r\n    }\r\n\r\n    @include breakpoint(map-get($breakpoints, large)) {\r\n      left: -20px;\r\n      width: 32px;\r\n    }\r\n  }\r\n}\r\n\r\n// unordered lists items\r\nul > li {\r\n  // bullets\r\n  &:before {\r\n    @extend %bullets-level-1;\r\n  }\r\n\r\n  // bullets - second level\r\n  ul > li {\r\n    &:before {\r\n      @extend %bullets-level-2;\r\n    }\r\n  }\r\n\r\n  // bullets - third level\r\n  ul > li > ul > li {\r\n    &:before {\r\n      @extend %bullets-level-3;\r\n    }\r\n  }\r\n}\r\n\r\ndt {\r\n  font-weight: bold;\r\n  @extend %list-items;\r\n}\r\n\r\ndd {\r\n  @extend %list-items;\r\n}\r\n\r\nhr {\r\n  @include hidden;\r\n}\r\n\r\n// bold texts\r\nb,\r\nstrong {\r\n  font-weight: 600; // matches semi-bold weight\r\n}\r\n\r\n// links\r\na {\r\n  @include no-highlight;\r\n\r\n  &:link {\r\n    color: map-get($link-colors, link);\r\n  }\r\n\r\n  &:visited {\r\n    color: map-get($link-colors, visited);\r\n  }\r\n\r\n  &:hover {\r\n    color: map-get($link-colors, hover);\r\n  }\r\n\r\n  &:active,\r\n  &:focus {\r\n    color: map-get($link-colors, active);\r\n  }\r\n}\r\n\r\n// link color classes\r\n@each $color in map_keys($link-colors) {\r\n  .link-color-#{$color} {\r\n    color: map-get($link-colors, $color);\r\n\r\n    // force color states\r\n    &:link,\r\n    &:visited,\r\n    &:hover,\r\n    &:active {\r\n      color: map-get($link-colors, $color);\r\n    }\r\n  }\r\n}\r\n\r\n// font family classes\r\n@each $font in map_keys($fonts) {\r\n  .font-#{$font} {\r\n    font-family: $font;\r\n  }\r\n}\r\n\r\n// font sizes classes\r\n@each $size in map_keys($font-sizes) {\r\n  .font-size-#{$size} {\r\n    font-size: nth(map-get($font-sizes, $size), 1);\r\n  }\r\n}\r\n","//////////////////////////////\n// Default Variables\n//////////////////////////////\n$Breakpoint-Settings: (\n  'default media': all,\n  'default feature': min-width,\n  'default pair': width,\n\n  'force all media type': false,\n  'to ems': false,\n  'transform resolutions': true,\n\n  'no queries': false,\n  'no query fallbacks': false,\n\n  'base font size': 16px,\n\n  'legacy syntax': false\n);\n\n$breakpoint: () !default;\n\n//////////////////////////////\n// Imports\n//////////////////////////////\n@import \"breakpoint/settings\";\n@import 'breakpoint/context';\n@import 'breakpoint/helpers';\n@import 'breakpoint/parsers';\n@import 'breakpoint/no-query';\n\n@import 'breakpoint/respond-to';\n\n@import \"breakpoint/legacy-settings\";\n\n//////////////////////////////\n// Breakpoint Mixin\n//////////////////////////////\n\n@mixin breakpoint($query, $no-query: false) {\n  @include legacy-settings-warning;\n\n  // Reset contexts\n  @include private-breakpoint-reset-contexts();\n\n  $breakpoint: breakpoint($query, false);\n\n  $query-string: map-get($breakpoint, 'query');\n  $query-fallback: map-get($breakpoint, 'fallback');\n\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\n\n  // Allow for an as-needed override or usage of no query fallback.\n  @if $no-query != false {\n    $query-fallback: $no-query;\n  }\n\n  @if $query-fallback != false {\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n  }\n\n  // Print Out Query String\n  @if not breakpoint-get('no queries') {\n    @media #{$query-string} {\n      @content;\n    }\n  }\n\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\n\n    $type: type-of(breakpoint-get('no query fallbacks'));\n    $print: false;\n\n    @if ($type == 'bool') {\n      $print: true;\n    }\n    @else if ($type == 'string') {\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\n        $print: true;\n      }\n    }\n    @else if ($type == 'list') {\n      @each $wrapper in breakpoint-get('no query fallbacks') {\n        @if $query-fallback == $wrapper {\n          $print: true;\n        }\n      }\n    }\n\n    // Write Fallback\n    @if ($query-fallback != false) and ($print == true) {\n      $type-fallback: type-of($query-fallback);\n\n      @if ($type-fallback != 'bool') {\n        #{$query-fallback} & {\n          @content;\n        }\n      }\n      @else {\n        @content;\n      }\n    }\n  }\n\n  @include private-breakpoint-reset-contexts();\n}\n\n\n@mixin mq($query, $no-query: false) {\n  @include breakpoint($query, $no-query) {\n    @content;\n  }\n}\n","//\r\n// CSSGuy4Hire - app\r\n//\r\n\r\n//\r\n// Configuration\r\n//\r\n@import 'config/variables';\r\n\r\n//\r\n// helpers\r\n//\r\n@import 'helpers/functions';\r\n@import 'helpers/mixins';\r\n@import 'helpers/helpers';\r\n\r\n// //\r\n// // Base\r\n// //\r\n@import '~normalize.css/normalize.css';\r\n@import 'base/fonts';\r\n@import 'base/typography';\r\n@import 'base/layout';\r\n\r\n//\r\n// variables as class names\r\n//\r\n\r\n// generate colors as CSS class names\r\n@each $color in map_keys($colors) {\r\n  .color-#{unquote($color)} {\r\n    color: map-get($colors, $color);\r\n  }\r\n\r\n  .bg-color-#{unquote($color)} {\r\n    background-color: map-get($colors, $color);\r\n  }\r\n}\r\n\r\n// generate link colors as CSS class names\r\n@each $link-color in map_keys($link-colors) {\r\n  .link-color-#{unquote($link-color)} {\r\n    color: map-get($link-colors, $link-color);\r\n  }\r\n}\r\n\r\n// generate font-sizes as CSS class names\r\n@each $font in map_keys($font-sizes) {\r\n  .font-size-#{unquote($font)} {\r\n    font-size: map-get($font-sizes, $font);\r\n  }\r\n}\r\n\r\n// generate font names as CSS class names\r\n@each $font in map_keys($fonts) {\r\n  $_font-names: map-keys($fonts);\r\n\r\n  @each $font in $_font-names {\r\n    .font-family-#{unquote($font)} {\r\n      font-family: unquote($font);\r\n    }\r\n  }\r\n\r\n  @each $font-weight in map_keys(map-get($fonts, $font)) {\r\n    $_font-name: map-deep-get($fonts, $font, $font-weight);\r\n\r\n    .font-family-#{unquote($_font-name)} {\r\n      font-family: unquote($font);\r\n      font-weight: $font-weight;\r\n    }\r\n  }\r\n}\r\n"]}